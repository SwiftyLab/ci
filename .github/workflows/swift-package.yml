name: Run Tests with Swift Package

on:
  workflow_call:
    inputs:
      matrix:
        description: The strategy-matrix to use containing OS and Swift version
        required: true
        type: string
      tracked-files:
        description: The files on which changes tracked and based on change actions are run
        required: false
        type: string
        default: |
          Sources/**/*.swift
          Tests/**/*
          Package*.swift
    secrets:
      CODECOV_TOKEN:
        description: Codecov token to upload code coverage

jobs:
  swift-package:
    name: Run tests on ${{ matrix.os }} with swift version ${{ matrix.swift }} dependencies ${{ matrix.dependencies != '' && toJSON(matrix.dependencies) }}
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(inputs.matrix) }}

    steps:
    - name: Check should proceed running steps
      id: precondition
      uses: SwiftyLab/ci/actions/condition@main
      with:
        files: ${{ inputs.tracked-files }}

    - name: Setup repository
      if: steps.precondition.outputs.proceed == 'true'
      uses: SwiftyLab/ci/actions/setup@main
      with:
        swift: ${{ matrix.swift }}

    - name: Resolve packages
      if: matrix.dependencies != ''
      id: resolve_packages
      uses: actions/github-script@v6.1.0
      env:
        PACKAGES: ${{ toJSON(matrix.dependencies) }}
      with:
        script: |
          const { execSync } = require('child_process');
          const { PACKAGES } = process.env;
          const packages = JSON.parse(PACKAGES);
          execSync(`swift package resolve`);
          for (const [package, version] of Object.entries(packages)) {
            core.startGroup(`Resolving ${package} to ${version}`);
            execSync(`swift package resolve ${package} --version ${version}`);
            core.endGroup();
          }

    - name: Run tests
      if: steps.precondition.outputs.proceed == 'true'
      run: npm run test

    - name: Swift Coverage Report
      if: |
        steps.precondition.outputs.proceed == 'true' &&
        (github.event_name == 'push' || github.event_name == 'pull_request')
      continue-on-error: true
      uses: maxep/spm-lcov-action@0.3.1
      with:
        file-format: lcov
        output-file: ./coverage.lcov

    - name: Codecov upload
      if: |
        steps.precondition.outputs.proceed == 'true' &&
        (github.event_name == 'push' || github.event_name == 'pull_request')
      continue-on-error: true
      uses: codecov/codecov-action@v4.5.0
      with:
        token: ${{ secrets.CODECOV_TOKEN || vars.CODECOV_TOKEN }}
        fail_ci_if_error: true
