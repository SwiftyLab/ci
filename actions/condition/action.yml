name: Get last run status for workflow
description: Get last run status for workflow
inputs:
  workflow:
    description: Workflow id to check status of
    required: false
    default: main.yml
  files:
    description: Check if the files changed
    required: true
outputs:
  proceed:
    description: Should proceed running steps
    value: ${{ steps.changed_files.outputs.any_changed == 'true' || steps.last_status.outputs.result != 'true' || (steps.last_status.outputs.result == 'true' && fromJSON(steps.last_status.outputs.result).passed != 'true') }}
runs:
  using: composite
  steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Get last run
      id: last_status
      uses: actions/github-script@v6.1.0
      env:
        WORKFLOW: ${{ inputs.workflow }}
      with:
        result-encoding: json
        script: |
          const { GITHUB_HEAD_REF, GITHUB_REF_NAME, WORKFLOW } = process.env;
          core.startGroup(`Checking last status for workflow \`${WORKFLOW}\` for branch \`${GITHUB_REF_NAME}\``);
          const result = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: WORKFLOW,
            branch: GITHUB_HEAD_REF ?? GITHUB_REF_NAME,
            per_page: 2,
            page: 1
          });
          core.info(JSON.stringify(result));
          core.endGroup();
          const currentConclusion = result.data.workflow_runs[0]?.conclusion;
          const success = (currentConclusion ? (currentConclusion === 'success') : true) &&
            (result.data.workflow_runs[1]?.conclusion === 'success');
          return {
            passed: success,
            sha: result.data.workflow_runs[1]?.head_sha,
          };

    - name: Check change in files
      if: steps.last_status.outputs.result == 'true' && fromJSON(steps.last_status.outputs.result).passed == 'true'
      id: changed_files
      uses: tj-actions/changed-files@v22.2
      with:
        files: ${{ inputs.files }}
        sha: ${{ fromJSON(steps.last_status.outputs.result).sha }}
